import time

import telebot
import conf  # —Ç–æ–∫–µ–Ω
from rhymes import get_rhyming_lines
from classifier import is_Bunin_ish

import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('agg')
from telebot import types

bot = telebot.TeleBot(conf.TOKEN)
bot.remove_webhook()

users = {}


# —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    users[message.chat.id] = {
        'N': True,  # –¥–æ–ø—É—Å—Ç–∏–º–æ –ª–∏ —Ä–∏—Ñ–º–æ–≤–∞—Ç—å –Ω–∞ —Å—É—â
        'V': True,
        'ADJ': True,
        'ADV': True,
        'OTHER': True,
        'state': 'start',  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        'line_number': 0,  # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª –¥–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–∏—Ñ–º—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        'current_rhymes': None  # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–∏—Ñ–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    }
    command_start = types.BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    command_menu = types.BotCommand(command='menu', description='–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.set_my_commands([command_start, command_menu])
    bot.set_chat_menu_button(message.chat.id, types.MenuButtonCommands('commands'))
    bot.send_message(message.chat.id,
                     f"üìú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!"
                     f" –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∏—Ñ–º—É–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–æ—á–∫–∞–º–∏ –ò.–ê. –ë—É–Ω–∏–Ω–∞.")
    menu(message)


# –ø–µ–≤—ã–π –≤—ã–∑–æ–≤ –º–µ–Ω—é
@bot.message_handler(commands=['menu'], func=lambda message: message.chat.id in users)
def send_menu(message):
    menu(message)


# –º–µ–Ω—é - –∞–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ–ª–ø. –≤ –Ω–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
def menu(message):
    if message.chat.id in users:
        users[message.chat.id]['state'] = 'main'

        # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_menu = types.InlineKeyboardMarkup()

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏. —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –∫–æ–ª–ª–±—ç–∫–∞–º
        button_pos = types.InlineKeyboardButton(text="üß∫–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏", callback_data="button_pos")
        button_stat = types.InlineKeyboardButton(text="üìî–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="button_stat")
        button_model = types.InlineKeyboardButton(text="üìú–ü–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ë—É–Ω–∏–Ω–∞?",
                                                  callback_data="button_model")
        button_rhyme = types.InlineKeyboardButton(text="ü™∂–ü–æ–ª—É—á–∏—Ç—å —Ä–∏—Ñ–º—É!", callback_data="button_rhyme")
        keyboard_menu.add(button_pos)
        keyboard_menu.add(button_stat)
        keyboard_menu.add(button_model)
        keyboard_menu.add(button_rhyme)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, "–Ø —É–º–µ—é –º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–≥–æ:\n\n"
                                          "–ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–æ—á–∫–∏ –ò.–ê. –ë—É–Ω–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∏—Ñ–º—É—é—Ç—Å—è —Å–æ —Å—Ç—Ä–æ—á–∫–∞–º–∏, "
                                          "–≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –≤–∞–º–∏.\n"
                                          "\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∏—Ñ–º–æ–≤–∞—Ç—å.\n"
                                          "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Ä–∏—Ñ–º–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≥–æ–ª—ã\n\n"
                                          "–ï—â–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: "
                                          "–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—Ä–∞–≤—è—Ç—Å—è –∏—Ö –∑–∞–ø—Ä–æ—Å—ã.\n\n"
                                          "–ê –µ—â–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏,"
                                          " –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ò.–ê. –ë—É–Ω–∏–Ω–∞! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏"
                                          " —Å –º–æ–µ–π –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π - –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ä–∏—Ñ–º—ã. –í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ë—É–Ω–∏–Ω—ã–º,"
                                          " –∏ –¥–∞–∂–µ –Ω–µ–π—Ä–æ–Ω–∫–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞—Å —Ä–∞–∑–ª–∏—á–∏—Ç—å!\n\n"
                                          "!!–í–∞–∂–Ω–æ: –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \menu,"
                                          " —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
                                          "ü§ç", reply_markup=keyboard_menu)


# _______________________________________________________rhyming__________________________________________________


# –∑–∞—à–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∏—Ñ–º–æ–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == 'button_rhyme')
def gonna_rhyme(call):
    start_rhyming(call.message)


# –æ–¥–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è "–ø—Ä–∏–Ω—è—Ç–∏–µ —Å—Ç—Ä–æ—á–∫–∏ + —Ä–∏—Ñ–º–∞ –≤ –æ—Ç–≤–µ—Ç"
def start_rhyming(message):
    if message.chat.id in users:
        users[message.chat.id]['state'] = 'get_rhyme'
        bot.send_message(message.chat.id,
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–æ, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ –≤ —Ä–∏—Ñ–º—É.\n\n"
                         "–ï—Å–ª–∏ —Ä–∏—Ñ–º–∞ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î—Ä—É–≥–∞—è —Ä–∏—Ñ–º–∞' –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏—Ñ–º—ã. "
                         "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–∏—Ñ–º—É –∫ —ç—Ç–æ–º—É —Å–ª–æ–≤—É\n"
                         "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É \menu.\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–æ:")


# –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É, –∞ –∫—Ä–∞—Å–∏–≤–æ —Ä–µ–¥–∞—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(content_types=['text'],
                     func=lambda message: message.chat.id in users and users[message.chat.id]['state'] == 'get_rhyme')
def find_rhyming_lines(message):
    users[message.chat.id]['state'] = 'get_another_rhyme'
    # –≤ —ç—Ç–æ–º —Å–æ—Å—Ç –Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç, –∫–∞–∫ –∏ –≤ —Å–æ—Å—Ç main
    word = message.text.strip().split(' ')[-1].lower()
    word = word.replace('.', '').replace('‚Ä¶', '').replace(',', '').replace(';', '').replace(':', '').replace(
        '!', '').replace('?', '').replace('(', '').replace(')', '').replace('"', '').replace("'", '')
    # –ø–æ–∫–∞ –∂–¥–µ–º:
    current_search = bot.send_message(message.chat.id,
                                      f'–ò—â—É –¥–ª—è –≤–∞—Å —Ä–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É "{word}", —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç–∫—É...')
    word = word.replace('-', '')
    is_russian = True
    for letter in word:
        if '–∞' > letter or letter > '—è':
            is_russian = False
            break
    if not is_russian:
        bot.edit_message_text(chat_id=message.chat.id, message_id=current_search.message_id,
                              text="‚òÅÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ—á–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è —Å–ª–æ–≤–æ–º –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã:")
        users[message.chat.id]['state'] = 'get_rhyme'
    else:
        rhyming_lines = get_rhyming_lines(word, users[message.chat.id])
        if rhyming_lines.empty:
            bot.edit_message_text(chat_id=message.chat.id, message_id=current_search.message_id,
                                  text='‚òÅÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ—á–∫–∏, —Ä–∏—Ñ–º—É—é—â–∏–µ—Å—è —Å —ç—Ç–∏–º'
                                       ' –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º/—Å–ª–æ–≤–æ–º.\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–æ:')
            users[message.chat.id]['state'] = 'get_rhyme'
        else:
            # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—á—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –≤—ã—Ç–∞—â–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥—Ä—É–≥—É—é —Ä–∏—Ñ–º—É
            users[message.chat.id]['current_rhymes'] = rhyming_lines
            rhyme = pretty_line(rhyming_lines.iloc[users[message.chat.id]['line_number']])
            keyboard_rhyme = types.InlineKeyboardMarkup(row_width=2)
            button_rhyme_ok = types.InlineKeyboardButton(text="ü™∂–í–∑—è—Ç—å —ç—Ç—É —Ä–∏—Ñ–º—É", callback_data="button_rhyme_ok")
            button_rhyme_other = types.InlineKeyboardButton(text="‚òÅÔ∏è–î—Ä—É–≥–∞—è –†–∏—Ñ–º–∞", callback_data="button_rhyme_other")
            keyboard_rhyme.row(button_rhyme_ok, button_rhyme_other)
            bot.edit_message_text(chat_id=message.chat.id, message_id=current_search.message_id,
                                  text=rhyme, reply_markup=keyboard_rhyme)


# —Ä–∏—Ñ–º–∞ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å - –¥–∞–¥–∏–º –¥—Ä—É–≥—É—é –∏–ª–∏ —Å–∫–∞–∂–µ–º —á—Ç–æ —Ä–∏—Ñ–º—ã –∫–æ–Ω—á–∏–ª–∏—Å—å
@bot.callback_query_handler(func=lambda call: call.data == 'button_rhyme_other')
def try_other_rhyme(call):
    if users[call.message.chat.id]['current_rhymes'] is None:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text='‚òÅÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ—á–∫–∏, —Ä–∏—Ñ–º—É—é—â–∏–µ—Å—è —Å —ç—Ç–∏–º'
                                   ' –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º/—Å–ª–æ–≤–æ–º.\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–æ:')
        users[call.message.chat.id]['state'] = 'get_rhyme'
    else:
        users[call.message.chat.id]['line_number'] += 1
        if users[call.message.chat.id]['line_number'] >= users[call.message.chat.id]['current_rhymes'].shape[0]:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                  text='‚òÅÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ —Ä–∏—Ñ–º.\n'
                                       '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∏—Ñ–º—ã –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞:')
            # –Ω—É–∂–µ–Ω –ø–æ—Ç–æ–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            with open('stats.txt') as file:
                user_stats = list(map(str.strip, file.readlines()))
            flag = True  # –µ—â–µ –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            for i in range(len(user_stats)):
                usr = user_stats[i].split(' ')[0]
                if flag and usr == str(call.message.chat.id):
                    flag = False
                    user_stats[i] = user_stats[i] + ' ' + str(users[call.message.chat.id]['line_number'])
            if flag:
                user_stats.append(f"{call.message.chat.id} {users[call.message.chat.id]['line_number']}")
            with open('stats.txt', 'w') as file:
                for i in user_stats:
                    print(i, file=file)
            # –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            users[call.message.chat.id]['state'] = 'get_rhyme'
            users[call.message.chat.id]['line_number'] = 0
            users[call.message.chat.id]['current_rhymes'] = None
        else:
            # –∞ –≤–æ—Ç –∏ –∫–æ–ª–ª–±—ç–∫ - —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –º—ã –∏—Å–ø—Ä–∞–≤–∏–º –≤—Å–µ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ä–∏—Ñ–º—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            rhyme = pretty_line(
                users[call.message.chat.id]['current_rhymes'].iloc[users[call.message.chat.id]['line_number']])
            keyboard_rhyme = types.InlineKeyboardMarkup(row_width=2)
            button_rhyme_ok = types.InlineKeyboardButton(text="ü™∂–í–∑—è—Ç—å —ç—Ç—É —Ä–∏—Ñ–º—É", callback_data="button_rhyme_ok")
            button_rhyme_other = types.InlineKeyboardButton(text="‚òÅÔ∏è–î—Ä—É–≥–∞—è –†–∏—Ñ–º–∞", callback_data="button_rhyme_other")
            keyboard_rhyme.row(button_rhyme_ok, button_rhyme_other)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                  text=rhyme, reply_markup=keyboard_rhyme)


# —Ä–∏—Ñ–º–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏ –º—ã –≥–æ—Ç–æ–≤–∏–º—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
@bot.callback_query_handler(func=lambda call: call.data == 'button_rhyme_ok')
def save_this_rhyme(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text=call.message.text)
    # —ç—Ç–æ—Ç –∫—É—Å–æ–∫ –∫–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    with open('stats.txt') as file:
        user_stats = list(map(str.strip, file.readlines()))
    flag = True
    for i in range(len(user_stats)):
        usr = user_stats[i].split(' ')[0]
        if flag and usr == str(call.message.chat.id):
            flag = False
            user_stats[i] = user_stats[i] + ' ' + str(users[call.message.chat.id]['line_number'])
    if flag:
        user_stats.append(f"{call.message.chat.id} {users[call.message.chat.id]['line_number']}")
    with open('stats.txt', 'w') as file:
        for i in user_stats:
            print(i, file=file)
    users[call.message.chat.id]['line_number'] = 0
    users[call.message.chat.id]['current_rhymes'] = None
    start_rhyming(call.message)


# —Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–∏—Ñ–º—É
def pretty_line(line):
    # –ö–∞–Ω—É–Ω –ö—É–ø–∞–ª—ã; 1903; –ó–∞—Å—Ç—è—Ç –µ–ª–∏ —á–µ—Ä–Ω–æ–π —Ö–≤–æ–µ–π –∑–∞–ø–∞–¥,; 6; –∑–∞–ø–∞–¥; NOUN
    year = line['Year']
    ln = line['Original_line'].strip(',').strip(';').strip(':').strip('-').strip('(')
    if not year.isdigit():
        year = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ'
    res = f"ü™∂{ln}ü™∂\n\nüìú–≠—Ç–æ —Å—Ç—Ä–æ—á–∫–∞ –Ω–æ–º–µ—Ä {line['Line_number']} –∏–∑ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è {year} –≥–æ–¥–∞ '{line['Title']}'"
    return res


# __________________________________________________POS_________________________________________________


# –≤—ã–∑—ã–≤–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —á–∞—Å—Ç–µ–π —Ä–µ—á–∏
@bot.callback_query_handler(func=lambda call: call.data == 'button_pos')
def change_poses(call):
    pos_buttons(call)


# –∏–∑–º–µ–Ω—è–µ–º. –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –∫–∞–∫ –∂–∏–≤—ã–µ
# –Ω–∞ –Ω–µ–µ –Ω–∞–∂–∏–º–∞–µ—à—å, –∞ –Ω–∞ –Ω–µ–π –∫—Ä–µ—Å—Ç–∏–∫ –Ω–∞ –≥–∞–ª–æ—á–∫—É –º–µ–Ω—è–µ—Ç—Å—è
# –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤–∞–ª—è—Ç—Å—è, –∞ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∫—Ä–∞—Å–∏–≤–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
def pos_buttons(call):
    keyboard_pos = types.InlineKeyboardMarkup(row_width=2)
    button_noun = types.InlineKeyboardButton(text=f"—Å—É—â {'‚úîÔ∏è' if users[call.message.chat.id]['N'] else '‚úñÔ∏è'}",
                                             callback_data="button_noun")
    button_verb = types.InlineKeyboardButton(text=f"–≥–ª {'‚úîÔ∏è' if users[call.message.chat.id]['V'] else '‚úñÔ∏è'}",
                                             callback_data="button_verb")
    button_adj = types.InlineKeyboardButton(text=f"–ø—Ä–∏–ª {'‚úîÔ∏è' if users[call.message.chat.id]['ADJ'] else '‚úñÔ∏è'}",
                                            callback_data="button_adj")
    button_adv = types.InlineKeyboardButton(text=f"–Ω–∞—Ä {'‚úîÔ∏è' if users[call.message.chat.id]['ADV'] else '‚úñÔ∏è'}",
                                            callback_data="button_adv")
    button_other = types.InlineKeyboardButton(text=f"–¥—Ä—É–≥–∏–µ {'‚úîÔ∏è' if users[call.message.chat.id]['OTHER'] else '‚úñÔ∏è'}",
                                              callback_data="button_other")
    keyboard_pos.row(button_noun, button_verb)
    keyboard_pos.row(button_adj, button_adv)
    keyboard_pos.row(button_other)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyboard_pos,
                          text="üß∫–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∏—Ñ–º–æ–≤–∞—Ç—å."
                               "\n\n–Ø —É–º–µ—é –æ—Ç—Å–µ–∏–≤–∞—Ç—å:\n"
                               "- —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ\n"
                               "- –≥–ª–∞–≥–æ–ª—ã (–≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤—ã, –ø—Ä–∏—á–∞—Å—Ç–∏—è, –¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏—è)\n"
                               "- –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ (–ø–æ–ª–Ω—ã–µ/–∫—Ä–∞—Ç–∫–∏–µ, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏)\n"
                               "- –Ω–∞—Ä–µ—á–∏—è\n- –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏: –ø—Ä–µ–¥–ª–æ–≥–∏, —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Ç.–¥.\n\n"
                               "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å(‚úñÔ∏è) –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å(‚úîÔ∏è) "
                               "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å —Ä–µ—á–∏:")


# –∫–æ–ª–ª–±—ç–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Ä–µ—á–∏ = –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É. —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == 'button_noun')
def change_poses_noun(call):
    users[call.message.chat.id]['N'] = not users[call.message.chat.id]['N']
    pos_buttons(call)


@bot.callback_query_handler(func=lambda call: call.data == 'button_verb')
def change_poses_verb(call):
    users[call.message.chat.id]['V'] = not users[call.message.chat.id]['V']
    pos_buttons(call)


@bot.callback_query_handler(func=lambda call: call.data == 'button_adj')
def change_poses_adj(call):
    users[call.message.chat.id]['ADJ'] = not users[call.message.chat.id]['ADJ']
    pos_buttons(call)


@bot.callback_query_handler(func=lambda call: call.data == 'button_adv')
def change_poses_adv(call):
    users[call.message.chat.id]['ADV'] = not users[call.message.chat.id]['ADV']
    pos_buttons(call)


# —ç—Ç–æ –≤—Å—è–∫–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω—ã–µ –Ω–µ—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
@bot.callback_query_handler(func=lambda call: call.data == 'button_other')
def change_poses_other(call):
    users[call.message.chat.id]['OTHER'] = not users[call.message.chat.id]['OTHER']
    pos_buttons(call)


# _________________________________________________stat___________________________________________________


@bot.callback_query_handler(func=lambda call: call.data == 'button_stat')
def display_stats(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text="üìî–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª"
                               "–ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –¥—Ä—É–≥—É—é —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É. –ù–∞ —ç—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–µ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤—ã!.\n"
                               "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \menu.")
    with open('stats.txt') as file:
        user_stats = list(map(str.strip, file.readlines()))
    counter = 0
    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞ –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å—Ç—Ä–æ–∏–º –ª–∏–Ω–∏—é –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    for i in user_stats:
        y = list(map(int, i.split(' ')[1:]))
        x = []
        for j in range(len(y)):
            x.append(j + 1)
        if str(call.message.chat.id) == i.split(' ')[0]:
            plt.plot(x, y, label="–í—ã")
        else:
            counter += 1
            plt.plot(x, y, label=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {counter}")  # GUI outside of the main thread???
    plt.legend()
    plt.ylabel('–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—Ä–∞–≤—è—â–µ–π—Å—è —Ä–∏—Ñ–º—ã\n–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

    plt.savefig('plot.png', dpi=300)
    bot.send_photo(call.message.chat.id, photo=open('plot.png', 'rb'))
    plt.clf() # –∏–Ω–∞—á–µ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ –ª–∏–Ω–∏–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–∞–∫ –º—ã –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É


# _______________________________________________________model_______________________________________________


# –≤–∞—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª - –º–æ–¥–µ–ª—å–∫–∞ —Å—á–∏—Ç–∞–µ—Ç –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –±—É–Ω–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == 'button_model')
def start_Bunin_model(call):
    users[call.message.chat.id]['state'] = 'model'
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text="üìú–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –ø–æ—Ö–æ–∂–∞ –ª–∏ –≤–∞—à–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ò.–ê. –ë—É–Ω–∏–Ω–∞.\n"
                               "–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç—Ä–æ—á–∫—É!\n")


@bot.message_handler(content_types=['text'],
                     func=lambda message: message.chat.id in users and users[message.chat.id]['state'] == 'model')
def Bunin_model(message):
    # —è –≤–æ—Ç —ç—Ç–æ –¥–µ–ª–∞—é —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –±–æ—Ç–∞ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∑–∞–≤–∞–ª–∏—Ç—å –∫—É—á–µ–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 1
    # —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –æ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –±–µ—Ä–µ—Ç —Ç–µ–∫—Å—Ç - –∞ –∑–∞—Ç–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–∫—Å—Ç. –∑–∞–ø—Ä–æ—Å—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
    users[message.chat.id]['state'] = 'main'
    line = message.text
    current_message = bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à—É —Å—Ç—Ä–æ—á–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç–∫—É...')
    try:
        if is_Bunin_ish(line):
            bot.edit_message_text(chat_id=message.chat.id, message_id=current_message.message_id,
                                  text="ü™∂–£—Ö—Ç—ã! –í–∞—à–∞ —Å—Ç—Ä–æ—á–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ë—É–Ω–∏–Ω–∞! –í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")
        else:
            bot.edit_message_text(chat_id=message.chat.id, message_id=current_message.message_id,
                                  text="‚òÅÔ∏è–í–∞—à–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ë—É–Ω–∏–Ω–∞. –í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        # –ø–æ—Ç–æ–º—É —á—Ç–æ –º–± –µ—Å—Ç—å —Ç–∞–∫–∞—è —à—Ç—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª–æ–∂–∏—Ç –≤–µ–∫—Ç–æ—Ä–∞–π–∑–µ—Ä. –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ —É—Ö–æ–¥–∏—Ç –æ—Ç –æ—Ç–≤–µ—Ç–∞
        bot.edit_message_text(chat_id=message.chat.id, message_id=current_message.message_id,
                              text="‚òÅÔ∏è–í–∞—à–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—Ç—Ä–æ—á–∫—É –ë—É–Ω–∏–Ω–∞. –í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    # —á—Ç–æ–±—ã –¥–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, —Ç–∞–º –¥–∞–ª—å—à–µ —à–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    time.sleep(2)
    menu(message)


# –ø–æ—Ç–æ–º—É —á—Ç–æ amvera –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–µ–±—Ö—É–∫
if __name__ == '__main__':
    bot.polling(none_stop=True)

